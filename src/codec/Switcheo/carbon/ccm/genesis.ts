/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";

export const protobufPackage = "Switcheo.carbon.ccm";

/** GenesisState defines the ccm module's genesis state. */
export interface GenesisState {
  /**
   * An auto-incrementing count of x-chain txs generated by this chain. Used as
   * a nonce / ID unique to this chain.
   */
  createdTxCount: string;
  /** Details of cross chain tx generated by this chain. */
  createdTxDetails: { [key: string]: Uint8Array };
  /**
   * The cross chain tx IDs (issued by a sending chain) that has been processed
   * by this chain.
   */
  receivedTxIds: { [key: string]: Uint8Array };
  /** Denom to creator mapping. */
  denomCreators: { [key: string]: string };
  /** params defines all the paramaters of the module. */
  params?: Params;
  /** Deprecated: Used for Geneis import and export */
  zionCreatedTxDetails: { [key: string]: Uint8Array };
  /** Deprecated: Used for Geneis import and export */
  zionDoneTx: { [key: string]: Uint8Array };
  /** Deprecated: Used for Geneis import and export */
  zionDenomToCreator: { [key: string]: Uint8Array };
}

export interface GenesisState_CreatedTxDetailsEntry {
  key: string;
  value: Uint8Array;
}

export interface GenesisState_ReceivedTxIdsEntry {
  key: string;
  value: Uint8Array;
}

export interface GenesisState_DenomCreatorsEntry {
  key: string;
  value: string;
}

export interface GenesisState_ZionCreatedTxDetailsEntry {
  key: string;
  value: Uint8Array;
}

export interface GenesisState_ZionDoneTxEntry {
  key: string;
  value: Uint8Array;
}

export interface GenesisState_ZionDenomToCreatorEntry {
  key: string;
  value: Uint8Array;
}

function createBaseGenesisState(): GenesisState {
  return {
    createdTxCount: "",
    createdTxDetails: {},
    receivedTxIds: {},
    denomCreators: {},
    params: undefined,
    zionCreatedTxDetails: {},
    zionDoneTx: {},
    zionDenomToCreator: {},
  };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.createdTxCount !== "") {
      writer.uint32(10).string(message.createdTxCount);
    }
    Object.entries(message.createdTxDetails).forEach(([key, value]) => {
      GenesisState_CreatedTxDetailsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    Object.entries(message.receivedTxIds).forEach(([key, value]) => {
      GenesisState_ReceivedTxIdsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    Object.entries(message.denomCreators).forEach(([key, value]) => {
      GenesisState_DenomCreatorsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(42).fork()).ldelim();
    }
    Object.entries(message.zionCreatedTxDetails).forEach(([key, value]) => {
      GenesisState_ZionCreatedTxDetailsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    Object.entries(message.zionDoneTx).forEach(([key, value]) => {
      GenesisState_ZionDoneTxEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).ldelim();
    });
    Object.entries(message.zionDenomToCreator).forEach(([key, value]) => {
      GenesisState_ZionDenomToCreatorEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createdTxCount = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = GenesisState_CreatedTxDetailsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.createdTxDetails[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = GenesisState_ReceivedTxIdsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.receivedTxIds[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = GenesisState_DenomCreatorsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.denomCreators[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = GenesisState_ZionCreatedTxDetailsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.zionCreatedTxDetails[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = GenesisState_ZionDoneTxEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.zionDoneTx[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = GenesisState_ZionDenomToCreatorEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.zionDenomToCreator[entry8.key] = entry8.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      createdTxCount: isSet(object.createdTxCount) ? String(object.createdTxCount) : "",
      createdTxDetails: isObject(object.createdTxDetails)
        ? Object.entries(object.createdTxDetails).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
      receivedTxIds: isObject(object.receivedTxIds)
        ? Object.entries(object.receivedTxIds).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
      denomCreators: isObject(object.denomCreators)
        ? Object.entries(object.denomCreators).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      zionCreatedTxDetails: isObject(object.zionCreatedTxDetails)
        ? Object.entries(object.zionCreatedTxDetails).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
      zionDoneTx: isObject(object.zionDoneTx)
        ? Object.entries(object.zionDoneTx).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
      zionDenomToCreator: isObject(object.zionDenomToCreator)
        ? Object.entries(object.zionDenomToCreator).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    message.createdTxCount !== undefined && (obj.createdTxCount = message.createdTxCount);
    obj.createdTxDetails = {};
    if (message.createdTxDetails) {
      Object.entries(message.createdTxDetails).forEach(([k, v]) => {
        obj.createdTxDetails[k] = base64FromBytes(v);
      });
    }
    obj.receivedTxIds = {};
    if (message.receivedTxIds) {
      Object.entries(message.receivedTxIds).forEach(([k, v]) => {
        obj.receivedTxIds[k] = base64FromBytes(v);
      });
    }
    obj.denomCreators = {};
    if (message.denomCreators) {
      Object.entries(message.denomCreators).forEach(([k, v]) => {
        obj.denomCreators[k] = v;
      });
    }
    message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
    obj.zionCreatedTxDetails = {};
    if (message.zionCreatedTxDetails) {
      Object.entries(message.zionCreatedTxDetails).forEach(([k, v]) => {
        obj.zionCreatedTxDetails[k] = base64FromBytes(v);
      });
    }
    obj.zionDoneTx = {};
    if (message.zionDoneTx) {
      Object.entries(message.zionDoneTx).forEach(([k, v]) => {
        obj.zionDoneTx[k] = base64FromBytes(v);
      });
    }
    obj.zionDenomToCreator = {};
    if (message.zionDenomToCreator) {
      Object.entries(message.zionDenomToCreator).forEach(([k, v]) => {
        obj.zionDenomToCreator[k] = base64FromBytes(v);
      });
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.createdTxCount = object.createdTxCount ?? "";
    message.createdTxDetails = Object.entries(object.createdTxDetails ?? {}).reduce<{ [key: string]: Uint8Array }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.receivedTxIds = Object.entries(object.receivedTxIds ?? {}).reduce<{ [key: string]: Uint8Array }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.denomCreators = Object.entries(object.denomCreators ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = String(value);
        }
        return acc;
      },
      {},
    );
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.zionCreatedTxDetails = Object.entries(object.zionCreatedTxDetails ?? {}).reduce<
      { [key: string]: Uint8Array }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value;
      }
      return acc;
    }, {});
    message.zionDoneTx = Object.entries(object.zionDoneTx ?? {}).reduce<{ [key: string]: Uint8Array }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.zionDenomToCreator = Object.entries(object.zionDenomToCreator ?? {}).reduce<{ [key: string]: Uint8Array }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGenesisState_CreatedTxDetailsEntry(): GenesisState_CreatedTxDetailsEntry {
  return { key: "", value: new Uint8Array() };
}

export const GenesisState_CreatedTxDetailsEntry = {
  encode(message: GenesisState_CreatedTxDetailsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_CreatedTxDetailsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_CreatedTxDetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_CreatedTxDetailsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
    };
  },

  toJSON(message: GenesisState_CreatedTxDetailsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
    return obj;
  },

  create(base?: DeepPartial<GenesisState_CreatedTxDetailsEntry>): GenesisState_CreatedTxDetailsEntry {
    return GenesisState_CreatedTxDetailsEntry.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState_CreatedTxDetailsEntry>): GenesisState_CreatedTxDetailsEntry {
    const message = createBaseGenesisState_CreatedTxDetailsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array();
    return message;
  },
};

function createBaseGenesisState_ReceivedTxIdsEntry(): GenesisState_ReceivedTxIdsEntry {
  return { key: "", value: new Uint8Array() };
}

export const GenesisState_ReceivedTxIdsEntry = {
  encode(message: GenesisState_ReceivedTxIdsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_ReceivedTxIdsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_ReceivedTxIdsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_ReceivedTxIdsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
    };
  },

  toJSON(message: GenesisState_ReceivedTxIdsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
    return obj;
  },

  create(base?: DeepPartial<GenesisState_ReceivedTxIdsEntry>): GenesisState_ReceivedTxIdsEntry {
    return GenesisState_ReceivedTxIdsEntry.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState_ReceivedTxIdsEntry>): GenesisState_ReceivedTxIdsEntry {
    const message = createBaseGenesisState_ReceivedTxIdsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array();
    return message;
  },
};

function createBaseGenesisState_DenomCreatorsEntry(): GenesisState_DenomCreatorsEntry {
  return { key: "", value: "" };
}

export const GenesisState_DenomCreatorsEntry = {
  encode(message: GenesisState_DenomCreatorsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_DenomCreatorsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_DenomCreatorsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_DenomCreatorsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: GenesisState_DenomCreatorsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create(base?: DeepPartial<GenesisState_DenomCreatorsEntry>): GenesisState_DenomCreatorsEntry {
    return GenesisState_DenomCreatorsEntry.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState_DenomCreatorsEntry>): GenesisState_DenomCreatorsEntry {
    const message = createBaseGenesisState_DenomCreatorsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGenesisState_ZionCreatedTxDetailsEntry(): GenesisState_ZionCreatedTxDetailsEntry {
  return { key: "", value: new Uint8Array() };
}

export const GenesisState_ZionCreatedTxDetailsEntry = {
  encode(message: GenesisState_ZionCreatedTxDetailsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_ZionCreatedTxDetailsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_ZionCreatedTxDetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_ZionCreatedTxDetailsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
    };
  },

  toJSON(message: GenesisState_ZionCreatedTxDetailsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
    return obj;
  },

  create(base?: DeepPartial<GenesisState_ZionCreatedTxDetailsEntry>): GenesisState_ZionCreatedTxDetailsEntry {
    return GenesisState_ZionCreatedTxDetailsEntry.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState_ZionCreatedTxDetailsEntry>): GenesisState_ZionCreatedTxDetailsEntry {
    const message = createBaseGenesisState_ZionCreatedTxDetailsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array();
    return message;
  },
};

function createBaseGenesisState_ZionDoneTxEntry(): GenesisState_ZionDoneTxEntry {
  return { key: "", value: new Uint8Array() };
}

export const GenesisState_ZionDoneTxEntry = {
  encode(message: GenesisState_ZionDoneTxEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_ZionDoneTxEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_ZionDoneTxEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_ZionDoneTxEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
    };
  },

  toJSON(message: GenesisState_ZionDoneTxEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
    return obj;
  },

  create(base?: DeepPartial<GenesisState_ZionDoneTxEntry>): GenesisState_ZionDoneTxEntry {
    return GenesisState_ZionDoneTxEntry.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState_ZionDoneTxEntry>): GenesisState_ZionDoneTxEntry {
    const message = createBaseGenesisState_ZionDoneTxEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array();
    return message;
  },
};

function createBaseGenesisState_ZionDenomToCreatorEntry(): GenesisState_ZionDenomToCreatorEntry {
  return { key: "", value: new Uint8Array() };
}

export const GenesisState_ZionDenomToCreatorEntry = {
  encode(message: GenesisState_ZionDenomToCreatorEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState_ZionDenomToCreatorEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_ZionDenomToCreatorEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_ZionDenomToCreatorEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
    };
  },

  toJSON(message: GenesisState_ZionDenomToCreatorEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
    return obj;
  },

  create(base?: DeepPartial<GenesisState_ZionDenomToCreatorEntry>): GenesisState_ZionDenomToCreatorEntry {
    return GenesisState_ZionDenomToCreatorEntry.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState_ZionDenomToCreatorEntry>): GenesisState_ZionDenomToCreatorEntry {
    const message = createBaseGenesisState_ZionDenomToCreatorEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array();
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
